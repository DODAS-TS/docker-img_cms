# List of collectors
GSI_DAEMON_NAME=$(GSI_DAEMON_NAME),/DC=ch/DC=cern/OU=computers/CN=vocms0815.cern.ch
GSI_DAEMON_NAME=$(GSI_DAEMON_NAME),/DC=org/DC=opensciencegrid/O=Open Science Grid/OU=Services/CN=cmssrv221.fnal.gov

# Global pool CCBs
GSI_DAEMON_NAME=$(GSI_DAEMON_NAME),/DC=ch/DC=cern/OU=computers/CN=vocms0806.cern.ch
GSI_DAEMON_NAME=$(GSI_DAEMON_NAME),/DC=org/DC=opensciencegrid/O=Open Science Grid/OU=Services/CN=cmssrv258.fnal.gov

# in case of HA setup, use:
COLLECTOR_HOST=cmsgwms-collector-global.cern.ch:COLLECTOR_PORT
COLLECTOR_HOST1=$(COLLECTOR_HOST)
CCB_ADDRESS=cmsgwms-ccb-global.cern.ch:CCB_PORT

MUST_MODIFY_REQUEST_EXPRS = False
Requirements = START

# Indicates that the startd can run any OS jobs
GLIDEIN_REQUIRED_OS = "any"
# Indicates that the startd has singularity
HAS_Singularity=True
# Indicates what the default singularity image should be (= CMS RHEL6 image)
OSG_SINGULARITY_IMAGE_DEFAULT="/cvmfs/singularity.opensciencegrid.org/bbockelm/cms:rhel6"
# Indicates where to find the singularity binary
OSG_SINGULARITY_PATH="/usr/bin/singularity"
# Indicates the version of singularity
OSG_SINGULARITY_VERSION="2.4.2-dist"
# Tells the startd to advertise these attributes to the central manager
STARTD_ATTRS = $(STARTD_ATTRS) GLIDEIN_REQUIRED_OS HAS_Singularity OSG_SINGULARITY_VERSION OSG_SINGULARITY_PATH OSG_SINGULARITY_IMAGE_DEFAULT

USER_JOB_WRAPPER=/usr/local/libexec/singularity_wrapper.sh

#
# Tell the master to wait a real long time before restarting the startd,
# since when the startd exits we don't want to restart it, we want to go
# away.
#
MASTER_BACKOFF_CONSTANT = 999999

#
# Set CLAIM_WORKLIFE to one second.  This tells the startd to go back
# to Unclaimed/Idle state after any job that runs for more than one
# second completes.
#
CLAIM_WORKLIFE = 1

#
# Modify Start expression so we will not accept a second job after
# the first one completes and the startd goes back to Idle.
#
START = (TotalTimeClaimedBusy =?= UNDEFINED || \
         TotalTimeClaimedBusy =?= 0 ) \
         &&  ( $(START) )

#
# Shutdown startd if we are currently idle and have ever been busy
# in the past.
#
STARTD.DAEMON_SHUTDOWN = (Activity=="Idle") && \
   ((TotalTimeClaimedBusy =!= UNDEFINED) && (TotalTimeClaimedBusy > 0))

#
# Shutdown the master if the startd exits.  Note that if
# STARTD_StartTime is zero, that the startd is not currently running.
#
MASTER.DAEMON_SHUTDOWN = (STARTD_StartTime =?= 0)